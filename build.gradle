plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

group 'com.github.tarcv.zandronum'
version '0.4.0'

application {
    mainClassName = "com.github.tarcv.zandronum.debotc.MainKt"
}

repositories {
    mavenCentral()
}

def moduleName = "debotc.main"
def javaHome = System.getProperty("java.home")

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

afterEvaluate {
    tasks.named("compileJava", JavaCompile) {
        inputs.property("moduleName", moduleName)
        doFirst {
            def args = [
                    "--module-path", classpath.asPath,
                    "--patch-module", "$moduleName=${sourceSets["main"].output.asPath}"
            ]
            println("Javac args -- ${args}")
            options.compilerArgs = args
            classpath = files()
        }
    }
}

def kotlinVersion = '1.3.72'
sourceSets {
    main {
        dependencies {
            api("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion:modular")
            api("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion:modular")
            api("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion:modular")
        }

        kotlin {
            srcDirs('src/commonMain/kotlin', 'src/jvmMain/kotlin')
            exclude('**/Util.kt')
        }
        java.srcDirs('src/commonMain/java', 'src/jvmMain/java')
    }
}

task jlink(type: Exec) {
    dependsOn('jar')

    def outputDir = file("$buildDir/jlink")
    inputs.files(configurations.runtimeClasspath)
    inputs.files(tasks.jar.archiveFile)
    outputs.dir(outputDir)

    doFirst {
        delete(outputDir)

        def modulePaths = [file("$javaHome/jmods"), configurations.runtimeClasspath.files, jar.archiveFile.get()]
                .collect {
                    if (it instanceof Iterable) {
                        it
                    } else {
                        [it]
                    }
                }
                .flatten()
                .join(File.pathSeparator)
        def launcher = "$moduleName/${application.mainClassName}"
        println("Module path -- $modulePaths")
        println("Launcher -- $launcher")
        commandLine("$javaHome/bin/jlink",
                "--module-path",
                modulePaths,
                "--add-modules", moduleName,
                "--launcher", "decompiler=" + launcher,
                "--output", outputDir
        )
    }
}
